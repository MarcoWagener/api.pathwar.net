FORMAT: 1A

# Pathwar API
Official Pathwar REST Api


## Authentication
To be defined


## Media Types
This API uses the json media-type to represent resources states and affordances.

Requests with a message-body are using plain JSON to set or update resource states.


## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.


# Pathwar API Root [/]
Pathwar API entry point.

This resource does not have any attributes. Instead it offers the initial API affordances in the form of HATEOAS links.

## Retrieve Entry Point [GET]

+ Request JSON User
    + Headers

            Accept: application/json

+ Response 200 (application/json)
    + Body

            {
                "_links": {
                    "child": [
                        {
                            "href": "achievements",
                            "title": "achievements"
                        },
                        {
                            "href": "organization-level-validations",
                            "title": "organization level validation submissions"
                        },
                        {
                            "href": "organization-items",
                            "title": "organization items"
                        },
                        {
                            "href": "users",
                            "title": "users"
                        },
                        {
                            "href": "organizations",
                            "title": "organizations"
                        },
                        {
                            "href": "items",
                            "title": "items"
                        },
                        {
                            "href": "user-activities",
                            "title": "user activities"
                        },
                        {
                            "href": "sessions",
                            "title": "sessions"
                        },
                        {
                            "href": "level-hints",
                            "title": "level hints"
                        },
                        {
                            "href": "organization-coupons",
                            "title": "organization validated coupons"
                        },
                        {
                            "href": "user-notifications",
                            "title": "user notifications"
                        },
                        {
                            "href": "level-instances",
                            "title": "level instances"
                        },
                        {
                            "href": "levels",
                            "title": "levels"
                        },
                        {
                            "href": "user-organization-invites",
                            "title": "user organization invites"
                        },
                        {
                            "href": "organization-achievements",
                            "title": "organization earned achievements"
                        },
                        {
                            "href": "organization-users",
                            "title": "organization items"
                        },
                        {
                            "href": "organization-levels",
                            "title": "organization bought levels"
                        },
                        {
                            "href": "servers",
                            "title": "servers"
                        },
                        {
                            "href": "coupons",
                            "title": "coupons"
                        },
                        {
                            "href": "user-tokens",
                            "title": "user tokens"
                        }
                    ]
                }
            }

+ Request XML User
    + Headers

            Accept: text/xml

+ Response 200 (text/xml)
    + Body

            <?xml version="1.0"?>
            <resource>
              <link rel="child" href="achievements" title="achievements"/>
              <link rel="child" href="organization-level-validations" title="organization level validation submissions"/>
              <link rel="child" href="organization-items" title="organization items"/>
              <link rel="child" href="users" title="users"/>
              <link rel="child" href="organizations" title="organizations"/>
              <link rel="child" href="items" title="items"/>
              <link rel="child" href="user-activities" title="user activities"/>
              <link rel="child" href="sessions" title="sessions"/>
              <link rel="child" href="level-hints" title="level hints"/>
              <link rel="child" href="organization-coupons" title="organization validated coupons"/>
              <link rel="child" href="user-notifications" title="user notifications"/>
              <link rel="child" href="level-instances" title="level instances"/>
              <link rel="child" href="levels" title="levels"/>
              <link rel="child" href="user-organization-invites" title="user organization invites"/>
              <link rel="child" href="organization-achievements" title="organization earned achievements"/>
              <link rel="child" href="organization-users" title="organization items"/>
              <link rel="child" href="organization-levels" title="organization bought levels"/>
              <link rel="child" href="servers" title="servers"/>
              <link rel="child" href="coupons" title="coupons"/>
              <link rel="child" href="user-tokens" title="user tokens"/>
            </resource>


# Group People
This section describes about the People


## User [/users/{id}]
This resource represents one particular user identified by its *id*.

+ Parameters
    + id (required, string, `a5595d9b-75a5-4a18-8cd9-2cff9907b7ac`) ... Id of a user.

+ Model (application/json)
    HATEOAS/JSON representation of User resource.

    + login (required, string, `m1ch3l`)
    + role (required, string, `user`)
    + email (required, string, `m1ch3l@pathwar.net`)
    + _id (required, uuid, `a5595d9b-75a5-4a18-8cd9-2cff9907b7ac`)

    + Headers

            ETag: 8f5d7df0210b75992b41834329c0abdea9a02bc2
            Last-Modified: Wed, 07 Jan 2015 16:43:17 GMT

    + Body

            {
                "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                "_etag": "8f5d7df0210b75992b41834329c0abdea9a02bc2",
                "_id": "a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                "_links": {
                    "collection": {
                        "href": "users",
                        "title": "users"
                    },
                    "parent": {
                        "href": "/",
                        "title": "home"
                    },
                    "self": {
                        "href": "users/a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                        "title": "user"
                    }
                },
                "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                "email": "m1ch3l@pathwar.net",
                "login": "m1ch3l",
                "role": "superuser"
            }


### Retrieve User [GET]
Return the information for the User

+ Request JSON User
    + Headers

            Accept: application/json

+ Response 200

    [User][]


+ Response 404 (application/json)

            {
                "_error": {
                    "code": 404,
                    "message": "The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again."
                },
                "_status": "ERR"
                }

+ Request XML User
    + Headers

            Accept: text/xml

+ Response 200

        TODO

+ Response 404 (text/xml)

            <?xml version="1.0"?>
            <resource>
              <_error>
                <code>404</code>
                  <message>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</message>
              </_error>
              <_status>ERR</_status>
            </resource>


### Edit User [PATCH]
Edit the information of the User

+ Request without If-Match header

+ Response 403 (application/json)

    + Body

            {
                "_status": "ERR",
                "_error": {
                    "message": "An etag must be provided to edit a document",
                    "code": 403
                }
            }

+ Request with If-Match header
    + Headers
        If-Match: 572c96529cb56a67c304eddf5a0af792caad2a5a

+ Response 200

    [User][]


+ Response 412 (text/html)

    + Body

            <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
            <title>412 Precondition Failed</title>
            <h1>Precondition Failed</h1>
            <p>Client and server etags don't match</p>

+ Response 422 (application/json)

    + Body

            {
                "_status": "ERR",
                "_issues": {
                    "login": "value 'm1ch3l' is not unique"
                }
            }

## User Collection [/users]
Collection of users.

+ Model (application/json)
    HATEOAS/JSON representation of User collection.

    + Headers

            Last-Modified: Tue, 30 Dec 2014 11:41:14 GMT

    + Body

            {
                "_items": [
                    {
                        "_created": "Thu, 01 Jan 1970 00:00:00 GMT",
                        "_etag": "6a169281df830752d6752b916f73d1976282c6c4",
                        "_id": "53705c4b-7bf9-4672-a872-c84988e16db8",
                        "_links": {
                            "self": {
                                "href": "users/53705c4b-7bf9-4672-a872-c84988e16db8",
                                "title": "user"
                            }
                        },
                        "_updated": "Thu, 01 Jan 1970 00:00:00 GMT",
                        "login": "root",
                        "role": "admin"
                    },
                    {
                        "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "_etag": "ea3b5b1b3320749e8198d79243b829ca1439958b",
                        "_id": "67e1c418-63eb-4dd3-b2f0-e5d8487b979b",
                        "_links": {
                            "self": {
                                "href": "users/67e1c418-63eb-4dd3-b2f0-e5d8487b979b",
                                "title": "user"
                            }
                        },
                        "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "email": "joe@pathwar.net",
                        "login": "joe",
                        "role": "user"
                    },
                    {
                        "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "_etag": "8f5d7df0210b75992b41834329c0abdea9a02bc2",
                        "_id": "a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                        "_links": {
                            "self": {
                                "href": "users/a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                                "title": "user"
                            }
                        },
                        "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "email": "m1ch3l@pathwar.net",
                        "login": "m1ch3l",
                        "role": "superuser"
                    }
                ],
                "_links": {
                    "parent": {
                        "href": "/",
                        "title": "home"
                    },
                    "self": {
                        "href": "users",
                        "title": "users"
                    }
                },
                "_meta": {
                    "max_results": 25,
                    "page": 1,
                    "total": 3
                }
            }


### List all users [GET]
Return all users.

+ Parameters
    + max_results (optional, integer, `25`) ... The maximum number of results to return
    + page (optional, integer, `2`) ... The page number when using pagination
    + where (optional, string, `where={"role":"superuser"}`) ... Filters


+ Response 200

    [User Collection][]

### Create User [POST]

+ Parameters

    + name (required, string, `m1ch3l`)
    + email (required, string, `m1ch3l@pathwar.net`)
    + password_blowfish (optional, string)
    + otp_secret (optional, string)
    + role = `user` (optional, string, `superuser`)

+ Response 201

    [User][]

+ Response 422 (application/json)

        {
            "_error": {
                "code": 422,
                "message": "Insertion failure: 1 document(s) contain(s) error(s)"
            },
            "_issues": {
                "login": "value m1ch3l is not unique"
            },
            "_status": "ERR"
        }

# Group Organization
This section describes about the Organizations

## Organization [/organizations/{id}]
This resource represents one particular organization identified by its *id*.

+ Parameters
    + id (required, string, `123e4567-e89b-12d3-a456-426655440000`) ... Id of an organization.

+ Model (application/json)
    JSON representation of Organization resource.
    + Body

        ```js
        {
          "name": "ulteam",
          "members": [
            "xxxx-xxxxxx-xxxxxx-xxxx",
            "xxxx-xxxxxx-xxxxxx-xxxx",
          ]
        }
        ```


### Retrieve Organization [GET]
Return the information for the Organization

+ Response 200

    [Organization][]


## Organization Collection [/organizations]
Collection of organizations.

+ Model (application/json)

        ```js
        {
          "count": 2,
          "_embedded": [
            {
              "name": "ulteam",
              "members": [
                "xxxx-xxxxxx-xxxxxx-xxx1",
                "xxxx-xxxxxx-xxxxxx-xxx2",
              ]
            },
            {
              "name": "ultreme",
              "members": [
                "xxxx-xxxxxx-xxxxxx-xxx3",
                "xxxx-xxxxxx-xxxxxx-xxx4",
              ]
            },
          ]
        }
        ```


### List all organizations [GET]

+ Response 200

    [Organization Collection][]


# Group Level
This section describes about the Level


## Level [/levels/{id}]
This resource represents one particular level identified by its *id*.

+ Parameters
    + id (required, string, `123e4567-e89b-12d3-a456-426655440000`) ... Id of a level.

+ Model (application/json)
    JSON representation of a Level resource.
    + Body

        ```js
        {
          "name": "pwnland",
          "description": "pwnland is cool",
          "author": "Pathwar Team (@pathwar_net)"
        }
        ```


### Retrieve Level [GET]
Return the information for the Level

+ Response 200

    [Level][]


## Level Collection [/levels]
Collection of levels.

+ Model (application/json)

        ```js
        {
          "count": 2,
          "_embedded": [
            {
              "name": "pwnland",
              "description": "pwnland is cool",
              "author": "Pathwar Team (@pathwar_net)"
            },
            {
              "name": "megapwnland",
              "description": "megapwnland is megacool",
              "author": "Pathwar Team (@pathwar_net)"
            }
          ]
        }
        ```


### List all levels [GET]

+ Response 200

    [Level Collection][]


# Group Coupon
This section describes about the Coupon


## Coupon [/coupons/{id}]
This resource represents one particular coupon identified by its *id*.

+ Parameters
    + id (required, string, `123e4567-e89b-12d3-a456-426655440000`) ... Id of a coupon.

+ Model (application/json)
    JSON representation of a Coupon resource.
    + Body

        ```js
        {
          "name": "magic coupon",
          "token": "*hidden*",
          "unique": true,
          "state": "available"
        }
        ```


### Retrieve Coupon [GET]
Return the information for the Coupon

+ Response 200

    [Coupon][]


## Coupon Collection [/coupons]
Collection of coupons.

+ Model (application/json)

        ```js
        {
          "count": 2,
          "_embedded": [
            {
              "name": "magic coupon",
              "token": "*hidden*",
              "unique": true,
              "state": "available"
            },
            {
              "name": "mega magic coupon",
              "token": "*hidden*",
              "unique": true,
              "state": "available"
            }
          ]
        }
        ```


### List all coupons [GET]

+ Response 200

    [Coupon Collection][]


# Group Achievement
This section describes about the Achievement


## Achievement [/achievements/{id}]
This resource represents one particular achievement identified by its *id*.

+ Parameters
    + id (required, string, `123e4567-e89b-12d3-a456-426655440000`) ... Id of a achievement.

+ Model (application/json)
    JSON representation of a Achievement resource.
    + Body

        ```js
        {
          "name": "hack the planet",
          "description": "Finish all the levels"
        }
        ```


### Retrieve Achievement [GET]
Return the information for the Achievement

+ Response 200

    [Achievement][]


## Achievement Collection [/achievements]
Collection of achievements.

+ Model (application/json)

        ```js
        {
          "count": 2,
          "_embedded": [
            {
              "name": "hack the planet",
              "description": "Finish all the levels"
            },
            {
              "name": "hack the universe",
              "description": "Finish all the levels and more"
            }
          ]
        }
        ```


### List all achievements [GET]

+ Response 200

    [Achievement Collection][]


# Group Session
This section describes about the Session


## Session [/sessions/{id}]
This resource represents one particular session identified by its *id*.

+ Parameters
    + id (required, string, `123e4567-e89b-12d3-a456-426655440000`) ... Id of a session.

+ Model (application/json)
    JSON representation of a Session resource.
    + Body

        ```js
        {
          "name": "Paris Final",
          "description": "Best teams of Paris"
        }
        ```


### Retrieve Session [GET]
Return the information for the Session

+ Response 200

    [Session][]


## Session Collection [/sessions]
Collection of sessions.

+ Model (application/json)

        ```js
        {
          "count": 2,
          "_embedded": [
            {
              "name": "Paris Final",
              "description": "Best teams of Paris"
            },
            {
              "name": "SF Final",
              "description": "Best teams of San Francisco"
            }
          ]
        }
        ```


### List all sessions [GET]

+ Response 200

    [Session Collection][]
